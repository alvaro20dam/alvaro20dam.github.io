{"componentChunkName":"component---src-templates-blog-post-js","path":"/2025-06-09-economic-cycles/","result":{"data":{"markdownRemark":{"html":"<p>In economics, many phenomena don't follow simple linear trends. Business cycles, technology adoption, or even product life cycles often exhibit periods of acceleration, deceleration, and inflection points. This notebook demonstrates how Polynomial Regression can more accurately capture these complex, non-linear relationships compared to traditional linear regression, providing a more nuanced understanding for forecasting and strategic planning.</p>\n<h3>Import Libraries</h3>\n<p>First, let's import all the necessary Python libraries.</p>\n<pre><code class=\"language-python\">import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import r2_score\n\n# Set a style for better visualization\nsns.set_style(\"whitegrid\")\nplt.rcParams['font.family'] = 'sans-serif'\n# plt.rcParams['font.sans-serif'] = ['Inter'] # Using 'Inter' as requested\n\n</code></pre>\n<h3>Generate Synthetic Economic Data</h3>\n<p>We'll create a synthetic dataset that mimics a non-linear economic cycle. This data will have an underlying polynomial trend with some added sinusoidal oscillation to represent cyclical behavior, plus random noise to simulate real-world variability.</p>\n<pre><code class=\"language-python\"># Define simulation parameters\nnp.random.seed(42) # for reproducibility\nnum_points = 100\nnoise_level = 0.5\n\n# Generate x values (e.g., time periods, scaled from 0 to 10)\nx = np.linspace(0, 10, num_points)\n\n# Define the true underlying non-linear economic trend (e.g., a cubic polynomial with oscillation)\n# y_true = 0.05 * x^3 - 0.8 * x^2 + 3 * x + 5 + 2 * sin(1.5 * x)\ny_true = 0.05 * x**3 - 0.8 * x**2 + 3 * x + 5 + 2 * np.sin(x * 1.5)\n\n# Add random noise to simulate observed data\ny_noisy = y_true + (np.random.rand(num_points) - 0.5) * noise_level * 10\n\n# Create a Pandas DataFrame for easier handling\ndata = pd.DataFrame({'Economic Metric (X)': x, 'True Value (Y)': y_true, 'Observed Value (Y)': y_noisy})\n\nprint(\"First 5 rows of the generated data:\")\nprint(data.head())\n</code></pre>\n<pre><code>First 5 rows of the generated data:\n   Economic Metric (X)  True Value (Y)  Observed Value (Y)\n0              0.00000        5.000000            4.372701\n1              0.10101        5.596792            7.850363\n2              0.20202        6.170651            7.330620\n3              0.30303        6.715128            7.208421\n4              0.40404        7.224088            5.504182\n</code></pre>\n<h3>Perform Linear Regression</h3>\n<p>We'll start by fitting a simple linear regression model to our noisy data. This often serves as a baseline to understand the limitations of simpler models for complex relationships.</p>\n<pre><code class=\"language-python\"># Reshape X for sklearn\nX = data[['Economic Metric (X)']]\ny_obs = data['Observed Value (Y)']\n\n# Create and train the linear regression model\nlinear_model = LinearRegression()\nlinear_model.fit(X, y_obs)\n\n# Make predictions\nlinear_predictions = linear_model.predict(X)\n\n# Calculate R-squared\nlinear_r2 = r2_score(y_obs, linear_predictions)\n\nprint(f\"Linear Regression R²: {linear_r2:.3f}\")\nprint(f\"Linear Model Equation: Y = {linear_model.coef_[0]:.2f}X + {linear_model.intercept_:.2f}\")\n\n</code></pre>\n<pre><code>Linear Regression R²: 0.282\nLinear Model Equation: Y = -0.48X + 8.33\n</code></pre>\n<h3>Perform Polynomial Regression</h3>\n<p>Now, let's apply polynomial regression. We'll transform our input features into polynomial features (e.g., X2, X3) and then fit a linear model to these transformed features. This allows us to model curves.</p>\n<p>For this demonstration, we'll use a 3rd-degree polynomial to match the underlying true function, but in a real project, you would typically use techniques like cross-validation to determine the optimal degree.</p>\n<pre><code class=\"language-python\"># Create polynomial features (e.g., degree 3)\npoly_features = PolynomialFeatures(degree=3, include_bias=False)\nX_poly = poly_features.fit_transform(X)\n\n# Create and train a linear regression model on the polynomial features\npoly_model = LinearRegression()\npoly_model.fit(X_poly, y_obs)\n\n# Make predictions using the polynomial model\npoly_predictions = poly_model.predict(X_poly)\n\n# Calculate R-squared\npoly_r2 = r2_score(y_obs, poly_predictions)\n\nprint(f\"Polynomial Regression R² (Degree 3): {poly_r2:.3f}\")\n\n</code></pre>\n<pre><code>Polynomial Regression R² (Degree 3): 0.415\n</code></pre>\n<h3>Visualize the Results</h3>\n<p>Visualizing the data and the model fits is crucial for understanding their performance and interpreting the insights.</p>\n<pre><code class=\"language-python\">plt.figure(figsize=(12, 7))\n\n# Plot noisy data points\nplt.scatter(data['Economic Metric (X)'], data['Observed Value (Y)'], label='Noisy Data Points', color='#6366f1', s=50, alpha=0.7)\n\n# Plot the true underlying trend\nplt.plot(data['Economic Metric (X)'], data['True Value (Y)'], label='True Economic Trend', color='#22c55e', linewidth=3, linestyle='--')\n\n# Plot the Linear Regression line\nplt.plot(data['Economic Metric (X)'], linear_predictions, label=f'Linear Regression (R²: {linear_r2:.3f})', color='#ef4444', linewidth=2)\n\n# Plot the Polynomial Regression line\nplt.plot(data['Economic Metric (X)'], poly_predictions, label=f'Polynomial Regression (R²: {poly_r2:.3f})', color='#0ea5e9', linewidth=2)\n\n\nplt.title('Unveiling Non-Linear Economic Cycles with Polynomial Regression', fontsize=16)\nplt.xlabel('Economic Metric (e.g., Time / Policy Intensity)', fontsize=12)\nplt.ylabel('Value (e.g., GDP Growth / Market Index)', fontsize=12)\nplt.legend(fontsize=10)\nplt.grid(True, linestyle='--', alpha=0.6)\nplt.show()\n\n</code></pre>\n<p><img src=\"/assets/img/economic-cycles1.png\" alt=\"png\"></p>\n<h3>Conclusion</h3>\n<p>As evident from the visualization and the R-squared values, the Polynomial Regression model provides a significantly better fit to the non-linear, cyclical economic data compared to the simple linear model.</p>\n<p>This project demonstrates the critical importance of:</p>\n<ul>\n<li>\n<p>Understanding the underlying nature of data: Economic phenomena are rarely perfectly linear.</p>\n</li>\n<li>\n<p>Selecting appropriate modeling techniques: Polynomial regression allows us to capture the nuances of growth acceleration, deceleration, and inflection points.</p>\n</li>\n<li>\n<p>Driving more accurate insights: Better model fit leads to more reliable forecasts and more informed strategic or policy decisions.</p>\n</li>\n</ul>\n<p>This analysis serves as a foundation for deeper exploration into time series analysis and more advanced econometric modeling techniques used to understand and predict complex economic behaviors.</p>\n<pre><code class=\"language-python\"></code></pre>","frontmatter":{"title":"Beyond Linear Growth: Unveiling Economic Cycles with Polynomial Regression","date":"October 03, 2025"}}},"pageContext":{"slug":"/2025-06-09-economic-cycles/"}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}